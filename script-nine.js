'esversion: 6';

let num = 20; // 

// Функция сначала ищет переменную, находящуюся внутри себя, а затем за пределами себя
function showFirstMessage(text) { // 1. Имя функции - должно быть глаголом с приписктй того, над чем выполняется действие 2. Аргумент (параметр) функции (в скобках)
   alert(text); // Действие, которое выполняет функция
   let num = 10; // Локальная переменная. Если мы объявляем переменную внутри функции, то и видна она будет только внутри функции. Если в функции задана переменная, то функция ищет переменную сначала внутри себя
   console.log(num); // Выводит переменную, которая внутри функции
}
showFirstMessage("Hello, World!"); // Вызываем функцию - имя функции()
console.log(num); // Выводит переменную, которая вне функции


// ФУНКЦИИ function - DECLARATION  -  значния данных функций можно выводить до выполнения самих функция

// console.log(calculator(3, 4));
// console.log(calculator(8, 4));
function calculator(a,b) {
   return (a + b); // При помощи ключевого слова "return" функция 1) возвращает значения 2) возвращает переменные, а именно - переменная, объвленная внутри функции не видна за ее пределами, но данное свойство делает ее видимой
}
console.log(calculator(3, 4));  // Вместо значений "a" и "b" вводим числа
console.log(calculator(8, 4));  // Вместо значений "a" и "b" вводим числа


function returnVar() {
   let number = 50;
   return number;
}
let anotherNumber = returnVar();  // Во внешнем мире создав новую переменную, можем в ее значение записать результат выполнения функции
console.log(anotherNumber);


// ФУНКЦИИ function EXPRESSION  -  когда мы функцию присваиваем в переменную. Эта функция создается только тогда, когда код до нее доходит. Ее нельзы вызвать заранее (как с переменной let)

let calc = function (a, b) {  // function expression - функциональное выражение
   return (a + b);
};
console.log(3, 4);
console.log(8, 4);



// CИНТАКСИС ФУНКЦИЙ В ES6

let calculators = (a, b) => { a + b };
console.log(8, 9);
console.log(7, 6);


// МЕТОДЫ И СВОЙСТВА У СТРОК И ЧИСЕЛ

// МЕТОДЫ - вспомогательные функции - изменяют типы данных

let str = 'text';
console.log(str.toUpperCase()); // (обязательно после названия методы ставить "()") Преобразовывает текст в верхний регистр (заглавные букы)
console.log(str.toLowerCase()); // (обязательно после названия методы ставить "()") Преобразовывает текст в нижний регистр (строчные букы)


// СВОЙСТВА - вспомогательные значения - только описывают типы данных (не изменяют их)

let std = 'text';
console.log(str.length); // Данное свойство "lenght" - используется дял получения длины как строки(в количестве символов), так и других типов данных. Данное ствойство ничего не изменяет, а лишь описвает (перенменную "str" в данном случае)



// МЕТОДЫ ДЛЯ ЧИСЕЛ

let twelve = "12.2";
console.log(Math.round(twelve)); // Данное свойство преобразует строку в число и округлят его до ближайшего целого числа

let thirteen = "12.2px";
console.log(parseInt(thirteen)); // Данное свойство преобразует строку в число и округлят его до ближайшего целого числа. Но также оно может преобразовывать числа в в другие системы исчисления (двоичная, десятичная и т.д.), достаточно через запятую указать систему исчисления
console.log(parseFloat(thirteen)); // Данное свойство откинуло пиксели 



let a = 3;
function addTwo(x) {
   let ret = x + 2;
   return ret;
}
let b = addTwo(a);
console.log(b);





let c = 10;
function addThree(g) {
   let y = g;
}
let d = addThree(c);
console.log(c);





let vall = 2;
function multiplyThis(n) {
   let own = n * vall;  // Значения "n" и "vall" - называются ОПЕРАНДАМИ
   return own;
}
let multiplied = multiplyThis(6);
console.log('example of scope:' + multiplied);



